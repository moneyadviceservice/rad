RSpec.describe SelfService::TravelInsuranceStatusPresenter do

  let(:principal) { FactoryBot.create(:principal) }
  let(:firm) { FactoryBot.create(:travel_insurance_firm) }

  subject(:presenter) { described_class.new(firm) }

  context 'when the travel_insurance_firm is not publishable' do
    let(:firm) { FactoryBot.create(:travel_insurance_firm_not_approved, principal: principal) }
  
    describe '#overall_status' do
      it 'provides "unpublished" if the firm is not publishable' do
        expect(presenter.overall_status).to eq('unpublished')
      end
    end

    # describe '#overall_status_icon' do
    #   it 'provides "exclamation"' do
    #     expect(presenter.overall_status_icon).to eq('exclamation')
    #   end
    # end
  end

  # context 'when the travel_insurance_firm is publishable' do
  #   let(:firm) { FactoryBot.create(:travel_insurance_firm, completed_firm: true) }
  #   describe '#overall_status' do
  #     it 'provides "published" ' do
  #       expect(presenter.overall_status).to eq('published')
  #     end
  #   end

  #   # describe '#overall_status_icon' do
  #   #   it 'provides "tick"' do
  #   #     binding.pry
  #   #     expect(presenter.overall_status_icon).to eq('tick')
  #   #   end
  #   # end
  # end

  # context 'when the travel_insurance_firm is hidden' do
  #   let(:firm) { FactoryBot.create(:travel_insurance_firm_hidden, completed_firm: true) }
  #   before do 
  #     firm.hidden_at = Time.zone.now
  #   end

  #   describe '#overall_status' do
  #     it 'provides "hidden" if the travel_insurance_firm is hidden' do
  #       expect(presenter.overall_status).to eq('hidden')
  #     end
  #   end

  #   # describe '#overall_status_icon' do
  #   #   it 'provides "tick"' do
  #   #     expect(presenter.overall_status_icon).to eq('tick')
  #   #   end
  #   # end
  # end

  
end
